var _ = require('lodash');
var utils = require('../utils');
var filters = require('../filters');
var provider = require('../provider');
var api = require('../providers/linode.js');

var commands = {};
exports.commands = commands;

commands.boot = {
  name: 'boot',
  usage: 'overcast linode boot [name]',
  description: 'Boot up an instance if powered off, otherwise do nothing.',
  required: [
    { name: 'name', filters: [filters.findFirstMatchingInstance, filters.shouldBeLinode] }
  ],
  async: true,
  run: function (args, next) {
    provider.boot(api, args, next);
  }
};

commands.create = {
  name: 'create',
  usage: 'overcast linode create [name] [options...]',
  description: ['Creates a new instance on Linode.'],
  examples: [
    '# Specified size:',
    '$ overcast linode create vm-01 --size 4096',
    '',
    '# Specified image and region:',
    '$ overcast aws create vm-01 --image "Debian 7.7" --region london'
  ],
  required: [
    { name: 'name', filters: filters.shouldBeNewInstance }
  ],
  options: [
    { usage: '--cluster CLUSTER', default: 'default' },
    { usage: '--image IMAGE', default: 'ubuntu-14-04-lts' },
    { usage: '--kernel KERNEL', default: 'Latest 64 bit' },
    { usage: '--password PASSWORD', default: 'autogenerated' },
    { usage: '--payment-term ID', default: '1 (monthly, if not metered)' },
    { usage: '--region REGION', default: 'newark' },
    { usage: '--size SIZE', default: '1024' },
    { usage: '--ssh-key PATH', default: 'overcast.key' },
    { usage: '--ssh-pub-key PATH', default: 'overcast.key.pub' },
    { usage: '--swap MB', default: '256' }
  ],
  async: true,
  run: function (args, next) {
    provider.create(api, args, next);
  }
};

commands.destroy = {
  name: 'destroy',
  usage: 'overcast linode destroy [name] [options...]',
  description: [
    'Destroys a Linode instance.',
    'Using --force overrides the confirm dialog.'
  ],
  examples: [
    '$ overcast linode destroy vm-01 --force'
  ],
  required: [
    { name: 'name', filters: [filters.findFirstMatchingInstance, filters.shouldBeLinode] }
  ],
  options: [
    { usage: '--force', default: 'false' }
  ],
  async: true,
  run: function (args, next) {
    provider.destroy(api, args, next);
  }
};

commands.images = {
  name: 'images',
  usage: 'overcast linode images',
  description: 'List all available images.',
  async: true,
  run: function (args, next) {
    provider.images(api, next);
  }
};

commands.distributions = _.extend({ alias: true }, commands.images);

commands.instances = {
  name: 'instances',
  usage: 'overcast linode instances',
  description: 'List all instances in your account.',
  async: true,
  run: function (args, next) {
    provider.instances(api, args, next);
  }
};

commands.linodes = _.extend({ alias: true }, commands.instances);

commands.kernels = {
  name: 'kernels',
  usage: 'overcast linode kernels',
  description: 'List all available kernels.',
  async: true,
  run: function (args, next) {
    provider.kernels(api, next);
  }
};

commands.reboot = {
  name: 'reboot',
  usage: 'overcast linode reboot [name]',
  description: 'Reboot an instance using the provider API.',
  required: [
    { name: 'name', filters: [filters.findFirstMatchingInstance, filters.shouldBeLinode] }
  ],
  async: true,
  run: function (args, next) {
    provider.reboot(api, args, next);
  }
};

commands.regions = {
  name: 'regions',
  usage: 'overcast linode regions',
  description: 'List all available regions.',
  async: true,
  run: function (args, next) {
    provider.regions(api, next);
  }
};

commands.datacenters = _.extend({ alias: true }, commands.regions);

commands.resize = {
  name: 'resize',
  usage: 'overcast linode resize [name] [size] [options...]',
  description: [
    'Shutdown, resize, and reboot a Linode instance.',
    '[size] can be a size ID, name or slug.',
    'If the --skip-boot flag is used, the instance will stay powered off.'
  ],
  examples: [
    '# Resize an instance to 4096:',
    '$ overcast linode resize vm-01 4096'
  ],
  required: [
    { name: 'name', filters: [filters.findFirstMatchingInstance, filters.shouldBeLinode] },
    { name: 'size' }
  ],
  options: [
    { usage: '--skip-boot', default: 'false' }
  ],
  async: true,
  run: function (args, next) {
    provider.resize(api, args, next);
  }
};

commands.shutdown = {
  name: 'shutdown',
  usage: 'overcast linode shutdown [name]',
  description: 'Shut down an instance using the provider API.',
  required: [
    { name: 'name', filters: [filters.findFirstMatchingInstance, filters.shouldBeLinode] }
  ],
  async: true,
  run: function (args, next) {
    provider.shutdown(api, args, next);
  }
};

commands.sizes = {
  name: 'sizes',
  usage: 'overcast linode sizes',
  description: 'List all available instance sizes.',
  async: true,
  run: function (args, next) {
    provider.sizes(api, next);
  }
};

commands.plans = _.extend({ alias: true }, commands.sizes);

commands.sync = {
  name: 'sync',
  usage: 'overcast linode sync [name]',
  description: 'Fetch and update instance metadata.',
  required: [
    { name: 'name', filters: [filters.findFirstMatchingInstance, filters.shouldBeLinode] }
  ],
  async: true,
  run: function (args, next) {
    provider.sync(api, args, next);
  }
};

commands.addprivate = {
  name: 'addprivate',
  usage: 'overcast linode addprivate [name]',
  description: [
    'Add private IP on Linode instance.'
  ],
  examples: [
    '$ overcast linode addprivate vm-01'
  ],
  required: [
    { name: 'name', filters: [filters.findFirstMatchingInstance, filters.shouldBeLinode] }
  ],
  options: [],
  async: true,
  run: function (args, next) {
    provider.addprivate(api, args, next);
  }
};
